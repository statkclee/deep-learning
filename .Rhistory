mutate(index = ifelse(str_detect(text, "fig/yolo"), "file", NA))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(index = ifelse(str_detect(text, "fig/yolo"), "file", "object"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(index = ifelse(str_extract(text, "fig/yolo/*.jpg"), "file", "object"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "fig/yolo/*.jpg"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*.\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*./.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "/.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*.\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file = tidyr::fill(file))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file2 = tidyr::fill(file))
? fill
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file2 = tidyr::fill(file, direction = "down"))
df <- data.frame(Month = 1:12, Year = c(2000, rep(NA, 11)))
df %>% fill(Year)
df
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file2 = tidyr::fill(file, direction = "down"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, direction = "down")
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down")
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
## 대상 이미지 지정
filenames <- list.files(path = "fig/yolo/")
path_filenames <- glue::glue("fig/yolo/{filenames}")
## 다수 이미지 위치 정보를 텍스트로 저장
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
# image_df %>% write_rds("data/image_df.rds")
image_dat <- read_rds("data/image_df.rds")
image_df <- image_dat %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
image_df
image_df %>%
mutate(processing = str_extract(text, "\d+"))
image_df %>%
mutate(processing = str_extract(text, "\\d+"))
image_df %>%
mutate(processing = str_extract(text, "\\d+ seconds"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing)
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), remove=":")
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":")
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
image_dat <- read_rds("data/image_df.rds")
image_df <- image_dat %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
image_df %>% write_rds("data/image_df.rds")
## 대상 이미지 지정
filenames <- list.files(path = "fig/yolo/")
path_filenames <- glue::glue("fig/yolo/{filenames}")
## 다수 이미지 위치 정보를 텍스트로 저장
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
image_df %>% write_rds("data/image_df.rds")
image_dat <- read_rds("data/image_df.rds")
image_df <- image_dat %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
image_df <- image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
system("mv predictions.png fig/yolo/predictions.png")
}
detect_object("fig/airplane.jpeg")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("fig/yolo/{filename}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{filename}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{filename}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("airplane.jpeg")
filename("fig/airplane.jpeg")
filename("fig/airplane.jpeg")
file.info("fig/airplane.jpeg")
dirname("fig/airplane.jpeg")
basename("fig/airplane.jpeg")
detect_object <- function(filename){
filename
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{basename(filename)}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
? basename
tools::file_path_sans_ext("ABCD.csv")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
file_extension <- basename(filename)
only_filename <- tools::file_path_sans_ext(file_extension)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{only_filename}_yolo.png")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
## lapply 적용을 위한 함수: 매개변수 다수 전달
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
file_extension <- basename(filename)
only_filename <- tools::file_path_sans_ext(file_extension)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{only_filename}_yolo.png")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
## 결과값을 가로채는 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
yolo_df <- lapply("fig/airplane.jpeg", detect_object)
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
image_df
image %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down")
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down")
list.files("fig/yolo")
path_filenames <- glue::glue("fig/yolo/{list.files("fig/yolo")}")
path_filenames <- glue::glue("fig/yolo/{list.files('fig/yolo')}")
path_filenames
yolo_images <- map(yolo_path_filenames, magick::image_read)
yolo_path_filenames <- glue::glue("fig/yolo/{list.files('fig/yolo')}")
yolo_images <- map(yolo_path_filenames, magick::image_read)
yolo_images
yolo_images %>%
image_append()
yolo_images %>%
image_combine()
yolo_images %>%
image_append(stack = TRUE)
yolo_images %>%
image_append(stack = TRUE) %>%
image_animate()
yolo_images %>%
image_append(stack = TRUE) %>%
image_animate(.)
yolo_images %>%
image_append(stack = TRUE) %>%
image_join(.)
yolo_images %>%
image_append(stack = TRUE) %>%
image_join()
yolo_images %>%
image_join()
yolo_images <- map(yolo_path_filenames, magick::image_read %>% resize(200))
yolo_images <- map(yolo_path_filenames, magick::image_read %>% magick::resize(200))
? image_resize
map(yolo_images, magick::image_resize, geometry = 200 )
yolo_images_data <- yolo_images %>%
image_join()
yolo_images_data %>%
image_animate()
? image_animate
yolo_images_data %>%
image_animate(fps = 10)
yolo_images_data %>%
image_animate(fps = 100)
yolo_images_data %>%
image_animate(fps = 1000)
yolo_images_data %>%
image_animate(fps = 500)
yolo_images_data %>%
image_animate(fps = 100)
? image_animate
yolo_images_data %>%
image_animate(fps = 1)
orignal_img <- image_read("data/captcha_dataset/226md.png")
library(tidyvese)
library(magick)
orignal_img <- image_read("data/captcha_dataset/226md.png")
orignal_img
orignal_img %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white") %>%
image_deskew() %>%
# image_morphology(method = "Thinning", kernel = "Rectangle:20x1+0+0^<") %>%
image_morphology('Dilate', "Diamond", iterations = 2)
orignal_img %>%
image_resize("377px")
orignal_img %>%
image_resize("377p")
orignal_img %>%
image_resize("377x")
orignal_img
orignal_img %>%
image_resize("377x")
orignal_img %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white") %>%
image_deskew() %>%
image_morphology('Dilate', "Diamond", iterations = 2)  %>%
image_resize("377x")
install.packages("text2speech")
library(text2speech)
if (requireNamespace("aws.polly", quietly = TRUE)) {
if ( tts_auth("amazon")) {
df = tts_voices(service = "amazon")
knitr::kable(df)
}
}
install.packages("aws.polly")
if (requireNamespace("aws.polly", quietly = TRUE)) {
if ( tts_auth("amazon")) {
df = tts_voices(service = "amazon")
knitr::kable(df)
}
}
tts_auth("amazon")
library(aws.polly)
aws.polly::list_voices()
? aws.polly::list_voices()
usethis::edit_r_environ()
? Startup
readRenviron("C:/Users/statkclee/Documents/.Renviron")
tts_auth("amazon")
if (requireNamespace("aws.polly", quietly = TRUE)) {
if ( tts_auth("amazon")) {
df = tts_voices(service = "amazon")
knitr::kable(df)
}
}
library(aws.polly)
tts_auth("amazon")
aws_df  <- tts_voices(service = "amazon")
aws_df
aws_df  <- tts_voices(service = "amazon") %>%
as_tibble
library(tidyverse)
library(tidyverse)
library(text2speech)
library(aws.polly)
tts_auth("amazon")
aws_df  <- tts_voices(service = "amazon") %>%
as_tibble
aws_df
aws_df %>%
filter(str_detect(language, "Korean"))
readRenviron("~/Documents/.Renviron")
readRenviron("~/.Renviron")
## Google -------------------------------------
library(googleLanguageR)
if (tts_google_auth()) {
df = tts_voices(service = "google")
print(head(df))
}
df
tts_voices(service = "google")
tts_google_auth()
readRenviron("~/.Renviron")
tts_google_auth()
tts_voices(service = "google")
google_df <- tts_voices(service = "google")
google_df <- tts_voices(service = "google") %>%
as_tibble()
google_df
google_df %>%
mutate(language = str_to_lower(language)) %>%
filter(str_detect(language, "korean"))
aws_df %>%
filter(str_detect(language, "Korean"))
library("tuneR")
usethis::edit_r_environ()
vec <- synthesize("데이터 과학자 이광춘님 환영합니다.", voice = "Seoyeon")
library("tuneR")
play(vec)
list_lexicon()
? synthesize
korean_mp3 <- synthesize("데이터 과학자 이광춘님 환영합니다.",
voice = "Seoyeon",
format = "mp3",
rate = 22050)
# On Mac OSX: setWavPlayer("/usr/bin/afplay")
# On Linux systems, try: setWavPlayer("/usr/bin/aplay")
setWavPlayer("C:/Program Files/Window Media Player/wmplayer.exe")
play(korean_synthesis)
korean_synthesis <- synthesize("데이터 과학자 이광춘님 환영합니다.", voice = "Seoyeon")
library("tuneR")
# On Mac OSX: setWavPlayer("/usr/bin/afplay")
# On Linux systems, try: setWavPlayer("/usr/bin/aplay")
setWavPlayer("C:/Program Files/Window Media Player/wmplayer.exe")
play(korean_synthesis)
play(korean_synthesis)
library("tuneR")
play(korean_synthesis)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
knitr::opts_knit$set(global.par = TRUE)
# Chunk 2: tts-cloud-services-aws-polly
library(tidyverse)
library(text2speech)
readRenviron("~/.Renviron")
## AWS -------------------------------------
library(aws.polly)
tts_auth("amazon")
aws_df  <- tts_voices(service = "amazon") %>%
as_tibble
aws_df %>%
filter(str_detect(language, "Korean"))
# Chunk 3: tts-cloud-services-google-language
## Google -------------------------------------
library(googleLanguageR)
tts_google_auth()
google_df <- tts_voices(service = "google") %>%
as_tibble()
google_df %>%
mutate(language = str_to_lower(language)) %>%
filter(str_detect(language, "korean"))
# Chunk 4: aws-polly-helloworld
korean_synthesis <- synthesize("데이터 과학자 이광춘님 환영합니다.", voice = "Seoyeon")
library("tuneR")
# On Mac OSX: setWavPlayer("/usr/bin/afplay")
# On Linux systems, try: setWavPlayer("/usr/bin/aplay")
# setWavPlayer("C:/Program Files/Window Media Player/wmplayer.exe")
play(korean_synthesis)
# Chunk 5: aws-polly-mp3
korean_mp3 <- synthesize("데이터 과학자 이광춘님 환영합니다.",
voice = "Seoyeon",
format = "mp3",
rate = 22050)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
knitr::opts_knit$set(global.par = TRUE)
# Chunk 2: tts-cloud-services-aws-polly
library(tidyverse)
library(text2speech)
readRenviron("~/.Renviron")
## AWS -------------------------------------
library(aws.polly)
tts_auth("amazon")
aws_df  <- tts_voices(service = "amazon") %>%
as_tibble
aws_df %>%
filter(str_detect(language, "Korean"))
# Chunk 3: tts-cloud-services-google-language
## Google -------------------------------------
library(googleLanguageR)
tts_google_auth()
google_df <- tts_voices(service = "google") %>%
as_tibble()
google_df %>%
mutate(language = str_to_lower(language)) %>%
filter(str_detect(language, "korean"))
# Chunk 4: aws-polly-helloworld
korean_synthesis <- synthesize("데이터 과학자 이광춘님 환영합니다.", voice = "Seoyeon")
library("tuneR")
# On Mac OSX: setWavPlayer("/usr/bin/afplay")
# On Linux systems, try: setWavPlayer("/usr/bin/aplay")
# setWavPlayer("C:/Program Files/Window Media Player/wmplayer.exe")
play(korean_synthesis)
# Chunk 5: aws-polly-mp3
korean_mp3 <- synthesize("데이터 과학자 이광춘님 환영합니다.",
voice = "Seoyeon",
format = "mp3",
rate = 22050)
tuneR::writeWave(korean_synthesis, "data/hello_world.wav")
System("dir")
system("dir")
system("ffmepg")
devtools::install_github("mccarthy-m-g/embedr")
devtools::install_github("mccarthy-m-g/embedr")
library(embedr)
embed_audio("data/hello_world.mp3")
