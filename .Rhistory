result <- map("fig/airplane.jpeg", detect_object)
system("rm capture.txt")
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
result <- map("fig/airplane.jpeg", detect_object)
tibble(text = read_lines("capture.txt"))
result <- lapply("fig/airplane.jpeg", detect_object)
result
lapply("fig/airplane.jpeg", image_darknet_detect, object = yolo_COCO)
tibble(text = read_lines("capture.txt"))
map("fig/airplane.jpeg", image_darknet_detect, object = yolo_COCO)
system("rm capture.txt")
## 결과값을 가로채는 CPP 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
map("fig/airplane.jpeg", image_darknet_detect, object = yolo_COCO)
tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
## 결과값을 가로채는 CPP 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", image_darknet_detect, object = yolo_COCO, threshold = 0.5)
tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", image_darknet_detect, object = yolo_COCO, threshold = 0.5)
## 데이터프레임 변환
tibble(text = read_lines("capture.txt"))
## 결과값을 가로채는 CPP 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", image_darknet_detect, object = yolo_COCO)
## 데이터프레임 변환
tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
## lapply 적용을 위한 함수: 매개변수 다수 전달
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
}
# detect_object("fig/airplane.jpeg")
## 결과값을 가로채는 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", detect_object)
tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", detect_object)
tibble(text = read_lines("capture.txt"))
## lapply 적용을 위한 함수: 매개변수 다수 전달
detect_object <- function(filename){
pred <- image_darknet_model(file = filename,
object = yolo_COCO,
threshold = 0.19)
}
# detect_object("fig/airplane.jpeg")
## 결과값을 가로채는 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", detect_object)
tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
knitr::opts_knit$set(global.par = TRUE)
# Chunk 2: airplane-image
library(tidyverse)
library(magick)
airplane <- image_read("fig/airplane.jpeg")
airplane %>%
image_resize(200)
# Chunk 4: yolo-library
library(image.darknet)
labels_COCO <- readLines(
system.file(package="image.darknet", "include", "darknet", "data",
"coco.names")
)
yolo_cfg <- "DL_library//yolov2.cfg"
yolo_weights <- "DL_library/yolov2.weights"
yolo_COCO <- image_darknet_model(type = 'detect',
model = yolo_cfg,
weights = yolo_weights,
labels = labels_COCO)
# yolo_COCO$labels
image_darknet_detect(file = "fig/airplane.jpeg",
object = yolo_COCO,
threshold = 0.5)
# Chunk 5: extract-object-name
## lapply 적용을 위한 함수: 매개변수 다수 전달
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
}
# detect_object("fig/airplane.jpeg")
## 결과값을 가로채는 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", detect_object)
tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
detect_object("fig/airplane.jpeg")
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
lapply("fig/airplane.jpeg", detect_object)
yolo_df <- lapply("fig/airplane.jpeg", detect_object)
yolo_df <- tibble(text = read_lines("capture.txt"))
yolo_df
list.dirs(path = "fig/yolo/")
list.dirs(path = "fig/")
list.files(path = "fig/yolo/")
filenames <- list.files(path = "fig/yolo/")
glue::glue("fig/yolo/{filenames}")
path_filenames <- glue::glue("fig/yolo/{filenames}")
filenames <- list.files(path = "fig/yolo/")
path_filenames <- glue::glue("fig/yolo/{filenames}")
image_df <- lapply(path_filenames, detect_object)
##
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
image_df
image_df %>% write_rds("data/image_df.rds")
image_df <- read_rds("data/image_df.rds")
image_df
image_df %>%
filter(!str_detect(text, "Boxes^"))
image_df %>%
filter(!str_detect(text, "^Boxes"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(index = ifelse(str_detect("fig/yolo"), "file", NA))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(index = ifelse(str_detect(text, "fig/yolo"), "file", NA))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(index = ifelse(str_detect(text, "fig/yolo"), "file", "object"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(index = ifelse(str_extract(text, "fig/yolo/*.jpg"), "file", "object"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "fig/yolo/*.jpg"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*.\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*./.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "/.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, "*.\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file = tidyr::fill(file))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file2 = tidyr::fill(file))
? fill
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file2 = tidyr::fill(file, direction = "down"))
df <- data.frame(Month = 1:12, Year = c(2000, rep(NA, 11)))
df %>% fill(Year)
df
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
mutate(file2 = tidyr::fill(file, direction = "down"))
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, direction = "down")
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down")
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
## 대상 이미지 지정
filenames <- list.files(path = "fig/yolo/")
path_filenames <- glue::glue("fig/yolo/{filenames}")
## 다수 이미지 위치 정보를 텍스트로 저장
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
# image_df %>% write_rds("data/image_df.rds")
image_dat <- read_rds("data/image_df.rds")
image_df <- image_dat %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
image_df
image_df %>%
mutate(processing = str_extract(text, "\d+"))
image_df %>%
mutate(processing = str_extract(text, "\\d+"))
image_df %>%
mutate(processing = str_extract(text, "\\d+ seconds"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing)
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), remove=":")
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":")
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
image_dat <- read_rds("data/image_df.rds")
image_df <- image_dat %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
image_df %>% write_rds("data/image_df.rds")
## 대상 이미지 지정
filenames <- list.files(path = "fig/yolo/")
path_filenames <- glue::glue("fig/yolo/{filenames}")
## 다수 이미지 위치 정보를 텍스트로 저장
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
image_df %>% write_rds("data/image_df.rds")
image_dat <- read_rds("data/image_df.rds")
image_df <- image_dat %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down") %>%
mutate(file = str_remove(file, "fig/yolo/"))
image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
image_df <- image_df %>%
mutate(processing = str_extract(text, "\\d\\.\\d+ seconds")) %>%
tidyr::fill(processing) %>%
separate(text, into = c("object", "confidence"), sep=":") %>%
filter(!str_detect(object, "fig/yolo/")) %>%
mutate(confidence = str_trim(confidence)) %>%
select(file, processing, object, confidence)
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
system("mv predictions.png fig/yolo/predictions.png")
}
detect_object("fig/airplane.jpeg")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("fig/yolo/{filename}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{filename}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{filename}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("airplane.jpeg")
filename("fig/airplane.jpeg")
filename("fig/airplane.jpeg")
file.info("fig/airplane.jpeg")
dirname("fig/airplane.jpeg")
basename("fig/airplane.jpeg")
detect_object <- function(filename){
filename
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{basename(filename)}")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
? basename
tools::file_path_sans_ext("ABCD.csv")
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
file_extension <- basename(filename)
only_filename <- tools::file_path_sans_ext(file_extension)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{only_filename}_yolo.png")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
## lapply 적용을 위한 함수: 매개변수 다수 전달
detect_object <- function(filename){
pred <- image_darknet_detect(file = filename,
object = yolo_COCO,
threshold = 0.19)
file_extension <- basename(filename)
only_filename <- tools::file_path_sans_ext(file_extension)
mv_instruction <- glue::glue("mv predictions.png fig/yolo/{only_filename}_yolo.png")
# system("mv predictions.png fig/yolo/predictions.png")
system(mv_instruction)
}
detect_object("fig/airplane.jpeg")
## 결과값을 가로채는 함수
library(Rcpp)
cppFunction('void redir() {FILE* F = freopen("capture.txt", "w+", stdout);}')
redir()
yolo_df <- lapply("fig/airplane.jpeg", detect_object)
redir()
image_df <- lapply(path_filenames, detect_object)
image_df <- tibble(text = read_lines("capture.txt"))
system("rm capture.txt")
image_df
image %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down")
image_df %>%
filter(!str_detect(text, "^Boxes")) %>%
mutate(file = str_extract(text, ".*\\.jpe?g")) %>%
tidyr::fill(file, .direction = "down")
list.files("fig/yolo")
path_filenames <- glue::glue("fig/yolo/{list.files("fig/yolo")}")
path_filenames <- glue::glue("fig/yolo/{list.files('fig/yolo')}")
path_filenames
yolo_images <- map(yolo_path_filenames, magick::image_read)
yolo_path_filenames <- glue::glue("fig/yolo/{list.files('fig/yolo')}")
yolo_images <- map(yolo_path_filenames, magick::image_read)
yolo_images
yolo_images %>%
image_append()
yolo_images %>%
image_combine()
yolo_images %>%
image_append(stack = TRUE)
yolo_images %>%
image_append(stack = TRUE) %>%
image_animate()
yolo_images %>%
image_append(stack = TRUE) %>%
image_animate(.)
yolo_images %>%
image_append(stack = TRUE) %>%
image_join(.)
yolo_images %>%
image_append(stack = TRUE) %>%
image_join()
yolo_images %>%
image_join()
yolo_images <- map(yolo_path_filenames, magick::image_read %>% resize(200))
yolo_images <- map(yolo_path_filenames, magick::image_read %>% magick::resize(200))
? image_resize
map(yolo_images, magick::image_resize, geometry = 200 )
yolo_images_data <- yolo_images %>%
image_join()
yolo_images_data %>%
image_animate()
? image_animate
yolo_images_data %>%
image_animate(fps = 10)
yolo_images_data %>%
image_animate(fps = 100)
yolo_images_data %>%
image_animate(fps = 1000)
yolo_images_data %>%
image_animate(fps = 500)
yolo_images_data %>%
image_animate(fps = 100)
? image_animate
yolo_images_data %>%
image_animate(fps = 1)
orignal_img <- image_read("data/captcha_dataset/226md.png")
library(tidyvese)
library(magick)
orignal_img <- image_read("data/captcha_dataset/226md.png")
orignal_img
orignal_img %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white") %>%
image_deskew() %>%
# image_morphology(method = "Thinning", kernel = "Rectangle:20x1+0+0^<") %>%
image_morphology('Dilate', "Diamond", iterations = 2)
orignal_img %>%
image_resize("377px")
orignal_img %>%
image_resize("377p")
orignal_img %>%
image_resize("377x")
orignal_img
orignal_img %>%
image_resize("377x")
orignal_img %>%
image_convert(colorspace = 'gray') %>%
image_threshold(threshold = "50%", type = "white") %>%
image_deskew() %>%
image_morphology('Dilate', "Diamond", iterations = 2)  %>%
image_resize("377x")
pngs <-  pdftools::pdf_convert(ocr_pdf, dpi = 300)
ocr_pdf <- docxtractr::convert_to_pdf("data/Xaringan_OCR.pptx") # >= 0.6.2
ocr_pdf
pngs <-  pdftools::pdf_convert(ocr_pdf, dpi = 300)
fs::file_move("Xaring*.png", "data/")
library(fs)
? file_move
fs::file_copy("Xaring*.png", "data/")
fs::file_copy("Xaring*.png", "data")
? file_copy
fs::dir_create("data/OCR")
system("mv Xaring*.png data/OCR")
fs::dir_ls("data/OCR")
pngs
OCR_pdf_df <- tibble(page = glue::glue("data/OCR/{pngs}") )
library(tidyverse)
library(ari)
slickR(OCR_pdf_df$page, height = 600)
library(slickR)
slickR(OCR_pdf_df$page, height = 600)
OCR_pdf_df <- tibble(page = glue::glue("data/OCR/{pngs}") )
slickR(OCR_pdf_df$page, height = 600)
